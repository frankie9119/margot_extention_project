{"ast":null,"code":"var _jsxFileName = \"/Users/fc/Desktop/Openclassrooms/JavaScript/REACT/MARGOT 2/margot_second_project/src/ContactForm/ContactForm.js\";\nimport React from 'react';\nimport * as emailjs from 'emailjs-com';\nimport { Button, FormFeedback, Form, FormGroup, Label, Input } from 'reactstrap';\nimport SimpleReactValidator from 'simple-react-validator';\n\nclass ContactForm extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      fields: {},\n      errors: {},\n      name: '',\n      email: '',\n      message: ''\n    };\n  }\n\n  handleSubmit(e) {\n    e.preventDefault();\n\n    if (this.handleValidation()) {\n      alert(\"Form submitted\");\n    } else {\n      alert(\"Form has errors.\");\n    }\n\n    const {\n      name,\n      email,\n      subject,\n      message\n    } = this.state;\n    let templateParams = {\n      from_name: email,\n      to_name: 'fran001.test001@gmail.com',\n      subject: subject,\n      message_html: message\n    };\n    emailjs.send('gmail', 'template_hEmmNklR', templateParams, 'user_Blhjol4eDObs7zbNluxq3');\n    this.resetForm();\n  }\n\n  resetForm() {\n    this.setState({\n      name: '',\n      email: '',\n      subject: '',\n      message: ''\n    });\n  }\n\n  handleValidation() {\n    let fields = this.state.fields;\n    let name = this.state.name;\n    let email = this.state.email;\n    let errors = {};\n    let formIsValid = true; //Name\n\n    if (!name) {\n      formIsValid = false;\n      errors[\"name\"] = \"Cannot be empty\";\n    }\n\n    if (typeof name !== \"undefined\") {\n      if (!name.match(/^[a-zA-Z]+$/)) {\n        formIsValid = false;\n        errors[\"name\"] = \"Only letters\";\n      }\n    } //Email\n\n\n    if (!email) {\n      formIsValid = false;\n      errors[\"email\"] = \"Cannot be empty\";\n    }\n\n    if (typeof email !== \"undefined\") {\n      let lastAtPos = email.lastIndexOf('@');\n      let lastDotPos = email.lastIndexOf('.');\n\n      if (!(lastAtPos < lastDotPos && lastAtPos > 0 && email.indexOf('@@') == -1 && lastDotPos > 2 && email.length - lastDotPos > 2)) {\n        formIsValid = false;\n        errors[\"email\"] = \"Email is not valid\";\n      }\n    }\n\n    this.setState({\n      errors: errors\n    });\n    return formIsValid;\n  }\n\n  contactSubmit(e) {\n    e.preventDefault();\n\n    if (this.handleValidation()) {\n      alert(\"Form submitted\");\n    } else {\n      alert(\"Form has errors.\");\n    }\n  }\n\n  handleChange(field, e) {\n    let fields = this.state.fields;\n    fields[field] = e.target.value;\n    this.setState({\n      fields\n    });\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      className: \"ContactForm\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 111\n      },\n      __self: this\n    }, React.createElement(\"h1\", {\n      className: \"p-heading1\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 112\n      },\n      __self: this\n    }, \"Get in Touch\"), React.createElement(\"form\", {\n      name: \"contactform\",\n      className: \"contactform\",\n      onSubmit: this.handleSubmit.bind(this),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 113\n      },\n      __self: this\n    }, React.createElement(FormGroup, {\n      controlId: \"formBasicName\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 114\n      },\n      __self: this\n    }, React.createElement(Label, {\n      className: \"text-muted\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 115\n      },\n      __self: this\n    }, \"Name\"), React.createElement(Input, {\n      type: \"text\",\n      name: \"name\",\n      value: this.state.name,\n      className: \"text-primary\",\n      onChange: this.handleChange.bind(this, 'name'),\n      placeholder: \"Name\",\n      required: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 116\n      },\n      __self: this\n    })), React.createElement(\"div\", {\n      className: \"col-md-6\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 126\n      },\n      __self: this\n    }, React.createElement(\"fieldset\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 127\n      },\n      __self: this\n    }, React.createElement(\"input\", {\n      ref: \"name\",\n      type: \"text\",\n      size: \"30\",\n      placeholder: \"Name\",\n      onChange: this.handleChange.bind(this, \"name\"),\n      value: this.state.name,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 128\n      },\n      __self: this\n    }), React.createElement(\"span\", {\n      className: \"error\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 129\n      },\n      __self: this\n    }, this.state.errors[\"name\"]), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 130\n      },\n      __self: this\n    }), React.createElement(\"input\", {\n      refs: \"email\",\n      type: \"text\",\n      size: \"30\",\n      placeholder: \"Email\",\n      onChange: this.handleChange.bind(this, \"email\"),\n      value: this.state.email,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 131\n      },\n      __self: this\n    }), React.createElement(\"span\", {\n      className: \"error\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 132\n      },\n      __self: this\n    }, this.state.errors[\"email\"]), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 133\n      },\n      __self: this\n    }))), React.createElement(\"div\", {\n      className: \"col-md-6\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 137\n      },\n      __self: this\n    }, React.createElement(\"fieldset\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 138\n      },\n      __self: this\n    }, React.createElement(\"textarea\", {\n      refs: \"message\",\n      cols: \"28\",\n      rows: \"10\",\n      className: \"comments\",\n      placeholder: \"Message\",\n      onChange: this.handleChange.bind(this, \"message\"),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 139\n      },\n      __self: this\n    }, this.state.fields[\"message\"]))), React.createElement(\"div\", {\n      className: \"col-md-12\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 143\n      },\n      __self: this\n    }, React.createElement(\"fieldset\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 144\n      },\n      __self: this\n    }, React.createElement(\"button\", {\n      className: \"btn btn-lg pro\",\n      id: \"submit\",\n      value: \"Submit\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 145\n      },\n      __self: this\n    }, \"Send Message\")))));\n  }\n\n}\n\nexport default ContactForm;","map":{"version":3,"sources":["/Users/fc/Desktop/Openclassrooms/JavaScript/REACT/MARGOT 2/margot_second_project/src/ContactForm/ContactForm.js"],"names":["React","emailjs","Button","FormFeedback","Form","FormGroup","Label","Input","SimpleReactValidator","ContactForm","Component","constructor","props","state","fields","errors","name","email","message","handleSubmit","e","preventDefault","handleValidation","alert","subject","templateParams","from_name","to_name","message_html","send","resetForm","setState","formIsValid","match","lastAtPos","lastIndexOf","lastDotPos","indexOf","length","contactSubmit","handleChange","field","target","value","render","bind"],"mappings":"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","sourcesContent":["import React from 'react';\nimport * as emailjs from 'emailjs-com';\n\nimport { Button, FormFeedback, Form, FormGroup, Label, Input } from 'reactstrap';\n\nimport SimpleReactValidator from 'simple-react-validator';\n\nclass ContactForm extends React.Component {\n  constructor(props){\n    super(props);\n\n    this.state = {\n      fields: {},\n      errors: {},\n      name: '',\n      email: '',\n      message: '',\n    }\n  }\nhandleSubmit(e) {\n    e.preventDefault()\n        if(this.handleValidation()){\n      alert(\"Form submitted\");\n    }else{\n      alert(\"Form has errors.\")\n    }\n    const { name, email, subject, message } = this.state\n    let templateParams = {\n      from_name: email,\n      to_name: 'fran001.test001@gmail.com',\n      subject: subject,\n      message_html: message,\n     }\n     emailjs.send(\n      'gmail',\n      'template_hEmmNklR',\n       templateParams,\n      'user_Blhjol4eDObs7zbNluxq3'\n     )\n     this.resetForm()\n\n }\nresetForm() {\n    this.setState({\n      name: '',\n      email: '',\n      subject: '',\n      message: '',\n    })\n  }\n  handleValidation(){\n    let fields = this.state.fields;\n    let name = this.state.name;\n    let email = this.state.email;\n    let errors = {};\n    let formIsValid = true;\n\n    //Name\n    if(!name){\n      formIsValid = false;\n      errors[\"name\"] = \"Cannot be empty\";\n    }\n\n    if(typeof name !== \"undefined\"){\n      if(!name.match(/^[a-zA-Z]+$/)){\n        formIsValid = false;\n        errors[\"name\"] = \"Only letters\";\n      }       \n    }\n\n    //Email\n    if(!email){\n      formIsValid = false;\n      errors[\"email\"] = \"Cannot be empty\";\n    }\n\n    if(typeof email !== \"undefined\"){\n      let lastAtPos = email.lastIndexOf('@');\n      let lastDotPos = email.lastIndexOf('.');\n\n      if (!(lastAtPos < lastDotPos && lastAtPos > 0 && email.indexOf('@@') == -1 && lastDotPos > 2 && (email.length - lastDotPos) > 2)) {\n        formIsValid = false;\n        errors[\"email\"] = \"Email is not valid\";\n      }\n    }\n\n\n\n    this.setState({errors: errors});\n    return formIsValid;\n  }\n\n  contactSubmit(e){\n    e.preventDefault();\n    if(this.handleValidation()){\n      alert(\"Form submitted\");\n    }else{\n      alert(\"Form has errors.\")\n    }\n\n  }\n\n  handleChange(field, e){       \n    let fields = this.state.fields;\n    fields[field] = e.target.value;        \n    this.setState({fields});\n  }\n\n  render(){\n    return (\n      <div className=\"ContactForm\">\n          <h1 className=\"p-heading1\">Get in Touch</h1>         \n        <form name=\"contactform\" className=\"contactform\" onSubmit= {this.handleSubmit.bind(this)}>\n        <FormGroup controlId=\"formBasicName\">\n              <Label className=\"text-muted\">Name</Label>\n              <Input\n                type=\"text\"\n                name=\"name\"\n                value={this.state.name}\n                className=\"text-primary\"\n                onChange={this.handleChange.bind(this, 'name')}\n                placeholder=\"Name\"\n                required\n              />\n            </FormGroup>\n          <div className=\"col-md-6\">\n            <fieldset>\n              <input ref=\"name\" type=\"text\" size=\"30\" placeholder=\"Name\" onChange={this.handleChange.bind(this, \"name\")} value={this.state.name}/>\n              <span className=\"error\">{this.state.errors[\"name\"]}</span>\n              <br/>\n              <input refs=\"email\" type=\"text\" size=\"30\" placeholder=\"Email\" onChange={this.handleChange.bind(this, \"email\")} value={this.state.email}/>\n              <span className=\"error\">{this.state.errors[\"email\"]}</span>\n              <br/>\n              \n            </fieldset>\n          </div>\n          <div className=\"col-md-6\">\n            <fieldset>\n              <textarea refs=\"message\" cols=\"28\" rows=\"10\"\n                className=\"comments\" placeholder=\"Message\" onChange={this.handleChange.bind(this, \"message\")}>{this.state.fields[\"message\"]}</textarea>\n            </fieldset>\n          </div>\n          <div className=\"col-md-12\">\n            <fieldset>\n              <button className=\"btn btn-lg pro\" id=\"submit\" value=\"Submit\">Send Message</button>\n            </fieldset>\n          </div>\n        </form>\n      </div>\n    )\n  }\n}\n\nexport default ContactForm\n"]},"metadata":{},"sourceType":"module"}